
@book{hoare_communicating_1985,
	address = {Englewood Cliffs, N.J},
	series = {Prentice-{Hall} {International} series in computer science},
	title = {Communicating sequential processes},
	isbn = {978-0-13-153271-7},
	url = {http://www.usingcsp.com/cspbook.pdf},
	publisher = {Prentice/Hall International},
	author = {Hoare, C. A. R.},
	year = {1985},
	keywords = {Computer programming, Parallel processing (Electronic computers)}
}

@phdthesis{haven_automated_2013,
	type = {{PhD} {Thesis}},
	title = {Automated proof checking in introductory discrete mathematics classes},
	url = {https://dspace.mit.edu/bitstream/handle/1721.1/85424/870532303-MIT.pdf},
	school = {Massachusetts Institute of Technology},
	author = {Haven, Andrew J},
	year = {2013},
	keywords = {proofs}
}

@inproceedings{hazelwood_applied_2018,
	title = {Applied machine learning at facebook: {A} datacenter infrastructure perspective},
	url = {https://research.fb.com/wp-content/uploads/2017/12/hpca-2018-facebook.pdf},
	booktitle = {2018 {IEEE} {International} {Symposium} on {High} {Performance} {Computer} {Architecture} ({HPCA})},
	publisher = {IEEE},
	author = {Hazelwood, Kim and Bird, Sarah and Brooks, David and Chintala, Soumith and Diril, Utku and Dzhulgakov, Dmytro and Fawzy, Mohamed and Jia, Bill and Jia, Yangqing and Kalro, Aditya and {others}},
	year = {2018},
	keywords = {ML},
	pages = {620--629}
}

@inproceedings{enberg_i/o_2019,
	title = {I/{O} {Is} {Faster} {Than} the {CPU} – {Let}’s {Partition} {Resourcesand} {Eliminate} ({Most}) {OS} {Abstractions}},
	url = {https://penberg.org/parakernel-hotos19.pdf},
	publisher = {HotOS},
	author = {Enberg, Pekka and Rao, Ashwin and Tarkoma, Sasu},
	year = {2019},
	keywords = {OS}
}

@inproceedings{litton_light-weight_2016,
	title = {Light-{Weight} {Contexts}: {An} {OS} {Abstraction} for {Safety} and {Performance}},
	url = {https://www.usenix.org/system/files/conference/osdi16/osdi16-litton.pdf},
	booktitle = {12th {USENIX} {Symposium} on {Operating} {Systems} {Design} and {Implementation} {OSDI} 16},
	author = {Litton, James and Vahldiek-Oberwagner, Anjo and Elnikety, Eslam and Garg, Deepak and Bhattacharjee, Bobby},
	year = {2016},
	keywords = {OS},
	pages = {49--64}
}

@article{radford_language_2019,
	title = {Language models are unsupervised multitask learners},
	url = {https://d4mucfpksywv.cloudfront.net/better-language-models/language_models_are_unsupervised_multitask_learners.pdf},
	journal = {URL https://openai. com/blog/better-language-models},
	author = {Radford, Alec and Wu, Jeffrey and Child, Rewon and Luan, David and Amodei, Dario and Sutskever, Ilya},
	year = {2019},
	keywords = {ML}
}

@article{baltes_towards_2018,
	title = {Towards a {Theory} of {Software} {Development} {Expertise}},
	url = {https://arxiv.org/abs/1807.06087v4},
	doi = {10.1145/3236024.3236061},
	abstract = {Software development includes diverse tasks such as implementing new features, analyzing requirements, and fixing bugs. Being an expert in those tasks requires a certain set of skills, knowledge, and experience. Several studies investigated individual aspects of software development expertise, but what is missing is a comprehensive theory. We present a first conceptual theory of software development expertise that is grounded in data from a mixed-methods survey with 335 software developers and in literature on expertise and expert performance. Our theory currently focuses on programming, but already provides valuable insights for researchers, developers, and employers. The theory describes important properties of software development expertise and which factors foster or hinder its formation, including how developers' performance may decline over time. Moreover, our quantitative results show that developers' expertise self-assessments are context-dependent and that experience is not necessarily related to expertise.},
	language = {en},
	urldate = {2019-05-06},
	author = {Baltes, Sebastian and Diehl, Stephan},
	month = jul,
	year = {2018}
}

@article{vo_race_2018,
	title = {Race {Recognition} {Using} {Deep} {Convolutional} {Neural} {Networks}},
	volume = {10},
	copyright = {http://creativecommons.org/licenses/by/3.0/},
	url = {https://www.mdpi.com/2073-8994/10/11/564},
	doi = {10.3390/sym10110564},
	abstract = {Race recognition (RR), which has many applications such as in surveillance systems, image/video understanding, analysis, etc., is a difficult problem to solve completely. To contribute towards solving that problem, this article investigates using a deep learning model. An efficient Race Recognition Framework (RRF) is proposed that includes information collector (IC), face detection and preprocessing (FD\&amp;P), and RR modules. For the RR module, this study proposes two independent models. The first model is RR using a deep convolutional neural network (CNN) (the RR-CNN model). The second model (the RR-VGG model) is a fine-tuning model for RR based on VGG, the famous trained model for object recognition. In order to examine the performance of our proposed framework, we perform an experiment on our dataset named VNFaces, composed specifically of images collected from Facebook pages of Vietnamese people, to compare the accuracy between RR-CNN and RR-VGG. The experimental results show that for the VNFaces dataset, the RR-VGG model with augmented input images yields the best accuracy at 88.87\% while RR-CNN, an independent and lightweight model, yields 88.64\% accuracy. The extension experiments conducted prove that our proposed models could be applied to other race dataset problems such as Japanese, Chinese, or Brazilian with over 90\% accuracy; the fine-tuning RR-VGG model achieved the best accuracy and is recommended for most scenarios.},
	language = {en},
	number = {11},
	urldate = {2019-05-06},
	journal = {Symmetry},
	author = {Vo, Thanh and Nguyen, Trang and Le, C. T.},
	month = nov,
	year = {2018},
	keywords = {ML, deep convolutional neural networks, race recognition, social networks, surveillance system},
	pages = {564}
}

@phdthesis{czaplicki_elm:_2012,
	type = {{PhD} {Thesis}},
	title = {Elm: {Concurrent} frp for functional guis},
	url = {https://www.seas.harvard.edu/sites/default/files/files/archived/Czaplicki.pdf},
	abstract = {Graphical user interfaces (GUIs) mediate almost all of our interactions with computers, whether it is through webpages, phone apps, or desktop applications. Functional Reactive Programming (FRP) is a promising approach to GUI design. This thesis presents Elm, a concurrent FRP language focused on easily creating responsive GUIs.Elm has two major features: (1) purely functional graphical layout and (2) support for Concurrent FRP. Purely functional graphical layout is a high level framework for working with complex visual components. It makes it quick and easy to create and combine text, images, and video into rich multimedia displays. Concurrent FRP solves some of FRP's long-standing effciency problems: global delays and needless recomputation. Together,Elm's two major features simplify the complicated task of creating responsive and usable graphical user interfaces. This thesis also includes a fully functional compiler for Elm, available at elm-lang.org. This site includes an interactive code editor that allows you to write and compile Elm programs online with nod ownload or install.},
	school = {Harvard University},
	author = {Czaplicki, Evan},
	year = {2012}
}

@phdthesis{armstrong_making_nodate,
	type = {{PhD} {Thesis}},
	title = {Making reliable distributed systems in the presence of software errors},
	url = {http://www.diva-portal.org/smash/get/diva2:9492/FULLTEXT01.pdf},
	abstract = {The work described in this thesis is the result of a research programstarted in 1981 to find better ways of programming Telecom applica-tions. These applications are large programs which despite carefultesting will probably contain many errors when the program is put intoservice. We assume that such programs do contain errors, and investigatemethods for building reliable systems despite such errors.The research has resulted in the development of a new programminglanguage (called Erlang), together with a design methodology, and set oflibraries for building robust systems (called OTP). At the time of writingthe technology described here is used in a number of major Ericsson, andNortel products. A number of small companies have also been formedwhich exploit the technology.The central problem addressed by this thesis is the problem of con-structing reliable systems from programs which may themselves containerrors. Constructing such systems imposes a number of requirements onany programming language that is to be used for the construction. I discussthese language requirements, and show how they are satisfied by Erlang.Problems can be solved in a programming language, or in the stan-dard libraries which accompany the language. I argue how certain of therequirements necessary to build a fault-tolerant system are solved in thelanguage, and others are solved in the standard libraries. Together theseform a basis for building fault-tolerant sodware systems.No theory is complete without proof that the ideas work in practice. Todemonstrate that these ideas work in practice I present a number of casestudies of large commercially successful products which use this technology. At the time of writing the largest of these projects is a major Ericsson product, having over a million lines of Erlang code. This product (the AXD301) is thought to be one of the most reliable products ever made byEricsson.Finally, I ask if the goal of finding better ways to program Telecomapplications was fulfilled—I also point to areas where I think the system could be improved.},
	school = {Mikroelektronik och informationsteknik},
	author = {Armstrong, Joe}
}